"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[450],{6029:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"os-iasql","metadata":{"permalink":"/os-iasql","source":"@site/blog/2022-04-14-os.mdx","title":"UPDATE iasql SET source = \'open\';","description":"We are excited to announce that IaSQL is now open source! The main repository is under https://github.com/iasql/iasql-engine. As perfectionists, we feel like IaSQL will never be truly ready. However, we believe IaSQL is at the point where it can start to be useful for developers managing infrastructure in the cloud. IaSQL is a SaaS that lets you model your infrastructure as data by maintaining a 2-way connection between your AWS account and a Postgres SQL database to represent the definitive state (and status) of your cloud which cannot be achieved with a static infrastructure declaration. This means that when you connect an AWS account to an IaSQL instance it automatically backfills the database with your existing cloud resources. No need to painstakingly redefine or reconcile your existing infrastructure, and IaSQL\'s module system means you can specify which parts of your cloud infrastructure you wish to control.","date":"2022-04-14T00:00:00.000Z","formattedDate":"April 14, 2022","tags":[],"readingTime":1.73,"hasTruncateMarker":false,"authors":[{"name":"Luis Fernando De Pombo","imageURL":"https://github.com/depombo.png","key":"depombo"},{"name":"David Ellis","imageURL":"https://github.com/dfellis.png","key":"dfellis"},{"name":"Alejandro Guillen","imageURL":"https://github.com/aguillenv.png","key":"aguillenv"}],"frontMatter":{"slug":"os-iasql","title":"UPDATE iasql SET source = \'open\';","authors":["depombo","dfellis","aguillenv"]},"nextItem":{"title":"Introduction to Infrastructure as SQL","permalink":"/intro-iasql"}},"content":"We are excited to announce that [IaSQL](https://iasql.com) is now open source! The main repository is under https://github.com/iasql/iasql-engine. As perfectionists, we feel like IaSQL will never be truly ready. However, we believe IaSQL is at the point where it can start to be useful for developers managing infrastructure in the cloud. IaSQL is a SaaS that lets you model your infrastructure as data by maintaining a 2-way connection between your AWS account and a Postgres SQL database to represent the definitive state (and status) of your cloud which cannot be achieved with a static infrastructure declaration. This means that when you connect an AWS account to an IaSQL instance it automatically backfills the database with your existing cloud resources. No need to painstakingly redefine or reconcile your existing infrastructure, and IaSQL\'s [module system](https://docs.iasql.com/module/) means you can specify which parts of your cloud infrastructure you wish to control.\\n\\n<img class=\\"screenshot\\" src=\\"https://iasql.com/lib_TQbMwqDvYvWhOqVJ/ae7kf13uek0k6mul.gif\\" alt=\\"drawing\\" width=\\"400\\"/>\\n\\nIaSQL also makes it possible to express infrastructure changes as code that can be version controlled. This can be done with any [migration system](https://en.wikipedia.org/wiki/Schema_migration) for schema and data changes, or in a script using [idempotent SQL inserts](https://www.prisma.io/dataguide/postgresql/inserting-and-modifying-data/insert-on-conflict) more akin to [IaC](https://en.wikipedia.org/wiki/Infrastructure_as_code).\\n\\nPostgreSQL IaSQL databases can be provisioned and configured via our [dashboard](https://app.iasql.com). The dashboard calls the [engine](https://github.com/iasql/iasql-engine) which is a Node.js server written in Typescript that provisions unmodified PostgreSQL instances loaded with tables representing AWS services controlled via the [AWS SDK](https://www.npmjs.com/package/aws-sdk). AWS is our main focus at the moment, but we plan to support GCP, Azure and other cloud providers soon. This is an [updated list](https://github.com/iasql/iasql-engine#cloud-providers) of the AWS services that we currently support. Let us know if you need a specific AWS service and we should be able prioritize it!\\n\\n<img class=\\"screenshot\\" src=\\"https://iasql.com/lib_VymYUCjjDarpARbl/87bwoyulswfitjo5.png\\" alt=\\"drawing\\" width=\\"1000\\"/>\\n\\nWe want to make it easier to write IaSQL modules, reduce waiting times when provisioning infrastructure, add more functionality to the existing AWS services, and so on. The list of things we want to build into IaSQL is long, but we want to do it in the open with your feedback and help. Drop us a line on [Discord](https://discord.com/invite/machGGczea)!"},{"id":"intro-iasql","metadata":{"permalink":"/intro-iasql","source":"@site/blog/2021-09-14-intro.mdx","title":"Introduction to Infrastructure as SQL","description":"What software you have deployed on what services and the interactions between them and the outside world is not a program, it is information about your infrastructure. Changing your infrastructure\xa0is\xa0a set of operations to perform, a program. A SQL database is a set of information and SQL queries read or change that data.","date":"2021-09-14T00:00:00.000Z","formattedDate":"September 14, 2021","tags":[],"readingTime":3.595,"hasTruncateMarker":false,"authors":[{"name":"Luis Fernando De Pombo","imageURL":"https://github.com/depombo.png","key":"depombo"},{"name":"David Ellis","imageURL":"https://github.com/dfellis.png","key":"dfellis"},{"name":"Alejandro Guillen","imageURL":"https://github.com/aguillenv.png","key":"aguillenv"}],"frontMatter":{"slug":"intro-iasql","title":"Introduction to Infrastructure as SQL","authors":["depombo","dfellis","aguillenv"]},"prevItem":{"title":"UPDATE iasql SET source = \'open\';","permalink":"/os-iasql"}},"content":"What software you have deployed on what services and the interactions between them and the outside world is not a program, it is information about your infrastructure. Changing your infrastructure\xa0*is*\xa0a set of operations to perform, a program. A SQL database is a set of information and SQL queries read or change that data.\\n\\n**Infrastructure State is Data, Infrastructure Change is Code. It\'s as simple as that.**\\n\\nAnd manipulating your infrastructure in this way is natural.\\n\\n```sql\\nINSERT INTO aws_ec2 (ami_id, ec2_instance_type_id)\\nSELECT ami.id, ait.id\\nFROM ec2_instance_type as ait, (\\n    SELECT id\\n    FROM   amis\\n    WHERE  image_name LIKE \'amzn-ami-hvm-%\'ORDER BY creation_date DESC\\n    LIMIT 1\\n) as ami\\nWHERE  ait.instance_name = \'t2.micro\';\\n```\\n\\n## **Relations and Types Matter for Infrastructure**\\n\\nInfrastructure as Code solutions do not have a good way of encoding dependencies across infrastructure pieces in a micro services architecture which makes it really hard to make and revert changes to infrastructure.\\n\\nRepresenting your infrastructure as SQL resolves the primary issue of YAML-based infrastructure tools by making the relations between pieces of your infrastructure first-class citizens, and enforcing type safety on the data and changes to it.\\n\\nYou can\'t set the EC2 instance type as\xa0`t2.mucro`\xa0and have your deploy system try and fail to create such an instance. The\xa0`insert`\xa0statement will fail and tell you zero rows were inserted and you can quickly see why.\\n\\nSimilarly, if you have a record in the\xa0`security_group`\xa0table, you can\'t delete it if there are any references to it in the\xa0`ec2_security_groups`\xa0join table. The relational structure of IaSQL prevents you from putting your infrastructure into an invalid state.\\n\\n## **New Powers: Explore, Query, and Automate Your Infrastructure**\\n\\nBecause your infrastructure is presented as a SQL database, you can connect to it with a SQL client of your choice and explore what you have and what the possibilities are.\\n\\n```sql\\nSHOW tables;\\n```\\n\\nYou can query for unusual usage patterns.\\n\\n```sql\\nSELECT aws_ec2.*\\nFROM aws_ec2\\nINNER JOIN ec2_instance_type AS ait ON ait.id = aws_ec2.ec2_instance_type_id\\nWHERE ait.vcpus > 8\\nORDER BY ait.vcpus DESC\\n```\\n\\nAnd since it is a database, you can create your own tables with their own meaning and associate them with your infrastructure.\\n\\n```sql\\nSELECT aws_ec2.*\\nFROM aws_ec2\\nINNER JOIN company_team_ec2s AS cte ON cte.aws_ec2_id = aws_ec2.id\\nINNER JOIN company_teams AS ct ON ct.id = cte.company_team_id\\nWHERE ct.name = \'Data Engineering\'\\n```\\n\\nFinally, your applications can know much more about what infrastructure they need than any auto-scaler solution out there. If you had a very infrequent but CPU/GPU-intensive job you need to handle at an unknown interval, you could give your application access to your IaSQL database and let it temporarily create and then destroy those resources.\\n\\n```jsx\\nconst ec2_instance_id = await iasql(`\\n  INSERT INTO aws_ec2 (ami_id, ec2_instance_type_id)\\n  SELECT ami.id, ait.id\\n  FROM ec2_instance_type as ait, (\\n      SELECT id\\n      FROM amis\\n      WHERE image_name = \'application-job-runner\'\\n  ) as ami\\n  WHERE ait.instance_name = \'g3.4xlarge\'\\n  RETURNING id;\\n`);\\nawait iasql(`\\n  INSERT INTO ec2_security_groups (ec2_id, security_group_id)\\n  SELECT ${ec2_instance_id}, sg.id\\n  FROM security_groups AS sg\\n  WHERE sg.name = \'application-job-group\';\\n`);\\n// Only large-enough job runners will take it based on job metadata\\nconst result = await job.run(myMassiveJob); \\nawait iasql(`\\n  DELETE FROM aws_ec2\\n  WHERE id = ${ec2_instance_id};\\n`);\\n```\\n\\n## **You Don\'t Need to Learn a New API (Probably)**\\n\\nNearly all cloud backend systems depend on a database, and most likely a SQL database, so you do not need to learn a new language to manipulate the infrastructure in this way.\\n\\nAnd likely you\'re using a\xa0[migration system](https://en.wikipedia.org/wiki/Schema_migration)\xa0in your backend to review changes to your database, which you can continue to use here, making it code to be reviewed, just like Infrastructure-as-Code.\\n\\n## **You Can Test, Too**\\n\\nSince the safety guarantees are provided by the types and relations between tables, you can simply copy your production infrastructure database into a local database and run your changes/migration against that and verify it works before you run it on your actual Infrastructure-as-SQL database.\\n\\n## **Recover With Ease**\\n\\nIt\'s 3AM and your service has gone down. You reverted the most recent IaSQL migration, but that didn\'t resolve the issue, and you aren\'t sure which change across which service today caused the outage. So, you simply replace the state of the IaSQL database with a snapshot from yesterday to bring everything back online to a known-good-state, and then take your time after you\'re well-rested to figure out what actually went wrong."}]}')}}]);